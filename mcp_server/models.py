# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:15:48+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Comparators(Enum):
    LessThan = 'LessThan'
    LessThanOrEqualTo = 'LessThanOrEqualTo'
    EqualTo = 'EqualTo'
    GreaterThanOrEqualTo = 'GreaterThanOrEqualTo'
    GreaterThan = 'GreaterThan'


class MemberViewModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    listAs: Optional[str] = None
    memberFrom: Optional[str] = None
    memberId: Optional[int] = None
    name: Optional[str] = None
    party: Optional[str] = None
    partyAbbreviation: Optional[str] = None
    partyColour: Optional[str] = None
    partyIsMainParty: Optional[bool] = None


class PartyVoteResultViewModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    partyName: Optional[str] = None
    voteCount: Optional[int] = None


class DivisionGroupByPartyViewModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    content: Optional[List[PartyVoteResultViewModel]] = None
    contentCount: Optional[int] = None
    date: Optional[datetime] = None
    divisionId: Optional[int] = None
    notContent: Optional[List[PartyVoteResultViewModel]] = None
    notContentCount: Optional[int] = None
    number: Optional[int] = None
    title: Optional[str] = None


class DivisionViewModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    amendmentMotionNotes: Optional[str] = None
    authoritativeContentCount: Optional[int] = Field(
        None,
        description='Authoritative content count is the official count. This is the teller content count when tellers are present, but member content count when there are no tellers.',
    )
    authoritativeNotContentCount: Optional[int] = Field(
        None,
        description='Authoritative not content count is the official count. This is the teller not content count when tellers are present, but member not content count when there are no tellers.',
    )
    contentTellers: Optional[List[MemberViewModel]] = None
    contents: Optional[List[MemberViewModel]] = None
    date: Optional[datetime] = None
    divisionHadTellers: Optional[bool] = Field(
        None, description='Whether the division had tellers or not'
    )
    divisionId: Optional[int] = None
    divisionWasExclusivelyRemote: Optional[bool] = None
    isGovernmentContent: Optional[bool] = None
    isGovernmentWin: Optional[bool] = None
    isHouse: Optional[bool] = None
    isWhipped: Optional[bool] = None
    memberContentCount: Optional[int] = Field(
        None,
        description='Member content count is the total tally of all members that voted content',
    )
    memberNotContentCount: Optional[int] = Field(
        None,
        description='Member not content count is the total tally of all members that voted not content',
    )
    notContentTellers: Optional[List[MemberViewModel]] = None
    notContents: Optional[List[MemberViewModel]] = None
    notes: Optional[str] = None
    number: Optional[int] = None
    remoteVotingEnd: Optional[datetime] = None
    remoteVotingStart: Optional[datetime] = None
    sponsoringMemberId: Optional[int] = None
    tellerContentCount: Optional[int] = Field(
        None, description='Content count is count recorded by the tellers'
    )
    tellerNotContentCount: Optional[int] = Field(
        None, description='Not Content count recorded by the tellers'
    )
    title: Optional[str] = None


class MemberVotingRecordViewModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    memberId: Optional[int] = None
    memberWasContent: Optional[bool] = None
    memberWasTeller: Optional[bool] = None
    publishedDivision: Optional[DivisionViewModel] = None


class DataDivisionsSearchGetResponse(RootModel[List[DivisionViewModel]]):
    root: List[DivisionViewModel]
